name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install all dependencies for libgit2
      run: |
        sudo apt-get install build-essential cmake
        sudo apt-get purge libssl-dev
        sudo apt-get install libssl1.1
        sudo apt-get install wget

    - name: Download the packages for libgit2
      run: |
        sudo wget https://github.com/libgit2/libgit2/archive/v0.24.0.tar.gz && \
        tar xzf v0.24.0.tar.gz

    - name: Install libgit2
      run: | 
        cd libgit2-0.24.0/
        sudo cmake . && sudo make && sudo make install

    - name: Install Dependencies
      run: |
        sudo python -m pip install --upgrade pip
        sudo pip install -r requirements.txt

    # - name: Lint Action
    #   uses: wearerequired/lint-action@v2.1.0
    #   with:
    #     pylint: true

    - name: Create a directory to store the users projects data
      run: mkdir -p API-Builder-users/data

    - name: Run Tests
      run: |
        cd API
        sudo python manage.py test

    # - name: Python security check using Bandit
    #   uses: kmcquade/bandit-report-artifacts-json@0.0.1
    #   with:
    #     python_version: ${{ matrix.python-version }}
    #     project_path: .
    #     ignore_failure: false

    # UPload the artifacts to the build folder
    # - name: Tar files
    #   run: mkdir outbuild && tar -cvf build.tar outbuild

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: backend/out

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: build
        path: backend/out

    - name: Deploy to Netlify
      uses: netlify/actions/cli@master
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      with:
        args: deploy --dir=build --prod
